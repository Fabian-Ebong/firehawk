#!/usr/bin/env bash

# The contents of defaults.template are modified by update_vars.sh.
# Editing these contents should only be done in secrets/defaults, and then propogated with 'source ./update_vars.sh'

# WARNING: When editing this config file do not store any secrets / sensitive information here.
# Secrets should only ever be stored in the encrypted secrets file.
# This unencrypted config file is still stored in your private repository and should not be publicly available.

# CONFIG INITIALIZATION #

# these defaults can be overidien by placing your own custom values in config-overrides, or in your secrets file if the information is of a sensitive nature.

# Private values must be used as values only (and not in #commented lines), since it is only the values that are kept private.
# Only Commented lines and the variable names / keys are read from this private secrets/defaults file in your private repo to auto generate the public firehawk/config.template file when running 'source ./update_vars.sh'.

# If these steps are followed then no private values will be or should be propogated into the public repo firehawk/config.template file.
# Before making any commits of config.template to the public firehawk repo ensure there are no secrets / sensitive information contained in a commit.
# Be sure to provide any new variable keys you may end up adding with a commented out description with example dummy values above your actual private value used to assist others.

# Do not put real world sensitive information in the example comments / #commented out lines.

# New comments should be only added in secrets/defaults as these lines will be propogated into the config.template schema used to initialise any new  secrets/defaults file for other users of the Firehawk repo.

# BEGIN CONFIGURATION #

# defaults_config_overide_version:
# If the version of this file changes, the file will be replaced in any deployment.
defaults_version="0.0.19"

# TF_VAR_deadline_version:
# The version of the deadline installer.
# default: TF_VAR_deadline_version=10.1.1.3
TF_VAR_deadline_version=10.1.1.3

# TF_VAR_selected_ansible_version:
# the version to use for ansible.  Can be 'latest', or a specific version.  due to a bug with pip and ansible we can have pip permissions and authentication issues when not using latest.
# this is because pip installs the version instead of apt-get when using a specific version instead of latest.  Resolution by using virtualenv will be required to resolve.
# eg: TF_VAR_selected_ansible_version=2.9.2
# default: TF_VAR_selected_ansible_version=latest
TF_VAR_selected_ansible_version=latest

# TF_VAR_syscontrol_gid:
# the group gid for the syscontrol group
TF_VAR_syscontrol_gid=9003

# TF_VAR_deployuser_uid:
# The UID of the deployuser for all hosts.  Ansible uses this user connect to provision with.
TF_VAR_deployuser_uid=9004

# TF_VAR_control_hostname:
# default: TF_VAR_control_hostname=ansiblecontrol$TF_VAR_envtier
TF_VAR_control_hostname=ansiblecontrol$TF_VAR_envtier

# TF_VAR_gateway_hostname:
# default: TF_VAR_gateway_hostname=firehawkgateway$TF_VAR_envtier
TF_VAR_gateway_hostname=firehawkgateway$TF_VAR_envtier

# TF_VAR_inventory: 
# The relative path to the inventory maintained for ansible from the /firehawk path.
# This should exist outside the public repository and the default should be used.
# default: TF_VAR_inventory=../secrets/$TF_VAR_envtier/inventory
TF_VAR_inventory=../secrets/$TF_VAR_envtier/inventory

# TF_VAR_terraform_version:
# The version of terraform that will be used
TF_VAR_terraform_version=0.12.26

# TF_VAR_aws_provider_version:
# The version for the aws provider plugin terraform will use
TF_VAR_aws_provider_version=2.63

# TF_VAR_node_centos_instance_type:
# The AWS instance type for the node used to provision the spot fleet image from.
# Note this is only used for provisioning the AMI.  The actual instance types used for rendering are controlled by the spot fleet template, and can vary.
# Usually it makes sense to provision this instance with a low cost instance type, but when testing workloads you may wish to increase it.
# https://aws.amazon.com/ec2/pricing/on-demand/
TF_VAR_node_centos_instance_type=r5.large

# TF_LOG_PATH:
# The path used to log terraform output.
# default: TF_LOG_PATH=/deployuser/tmp/terraform.log
TF_LOG_PATH=/deployuser/tmp/terraform.log

# ANSIBLE_FORCE_COLOR:
# When ansible is run via terraform local exec, colour is not normally visible.  This setting enforces color.
# default: ANSIBLE_FORCE_COLOR=1
ANSIBLE_FORCE_COLOR=1

# TF_VAR_openvpn_user:
# The OpenVPN Access Server username.  Changing this is not currently supported but planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_user=openvpnas
TF_VAR_openvpn_user=openvpnas

# TF_VAR_openvpn_admin_user:
# The OpenVPN Access Server admin username.  Changing this is not currently supported pbut planned as it may require changes to accomodate it with the Open VPN provisioning stage.
# default: TF_VAR_openvpn_admin_user=openvpnas
TF_VAR_openvpn_admin_user=openvpnas

# TF_VAR_softnas_ssh_user:
# The softnas username to provision with ssh.  Changing this is not currently supported. It is not used by general users, it is only for provisioning volumes and deployment.
# default: TF_VAR_softnas_ssh_user=ec2-user
TF_VAR_softnas_ssh_user=ec2-user

# TF_VAR_user_deadlineuser_name:
# A deadline user account is created to simplify handling of permissions for render nodes and services. Changing this value is not currently supported.
# default: TF_VAR_user_deadlineuser_name=deadlineuser
TF_VAR_user_deadlineuser_name=deadlineuser

# TF_VAR_general_use_ssh_key:
# This key will be generated if it doesn't already exist.  it will be used as an authorized key to access onsite systems and others where specified
# default: TF_VAR_general_use_ssh_key=/secrets/keys/id_ssh_rsa_$TF_VAR_envtier
TF_VAR_general_use_ssh_key=/secrets/keys/id_ssh_rsa_$TF_VAR_envtier

# TF_VAR_onsite_workstation_private_ssh_key:
# the path to the rsa key to copy its id to other local workstations for provisioning.  This is best left at its default value.
# default: TF_VAR_onsite_workstation_private_ssh_key=/secrets/keys/id_ssh_rsa_$TF_VAR_envtier
TF_VAR_onsite_workstation_private_ssh_key=/secrets/keys/id_ssh_rsa_$TF_VAR_envtier

# TF_VAR_pgp_key_path:
# the path to the pgp key for the dev environment.  the default should be fine.  ensure that unencrypted keys are never commited to version control.  this path should be in git ignore, or build a CI workflow to ensure that keys are encrypted before any commits occur.
# default: TF_VAR_pgp_key_path=/secrets/keys/.pgp-key-$TF_VAR_envtier
TF_VAR_pgp_key_path=/secrets/keys/.pgp-key-$TF_VAR_envtier

# TF_VAR_route_public_domain_name:
# Defines if you want hostnames accessible with a public domain name.
# If you enable it, your aws account must manage the public domain name in route 53, then you can use public domain names to route traffic.  For example, the vpn can be publicly accessible at vpn.example.com and the bastion host is publicly accessible at bastion.example.com.  Note that we normally use security groups to limit access to these nodes from a specific offsite ip address as well.
# This setting is not required to use your own domain name for internal hostnames, or for labelling s3 bucket cloud storage (eg a bucket name like myinstallers.example.com is still valid provided it is not already in use)
# default: TF_VAR_route_public_domain_name=false
TF_VAR_route_public_domain_name=false

# TF_VAR_use_public_domain_name_in_s3_buckets:
# Cloud storage buckets in AWS need to have unique global names.  You can use a public domain name you own to create unique cloud storage bucket names without worrying about this setting.
# default: TF_VAR_use_public_domain_name_in_s3_buckets=false
TF_VAR_use_public_domain_name_in_s3_buckets=false

# TF_VAR_softnas_mailserver:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_mailserver="mymailserver.mydomain.com"
TF_VAR_softnas_mailserver="mailserver.example.com"

# TF_VAR_softnas_smtp_port:
# mailserver details for softnas notifications
# default: TF_VAR_softnas_smtp_port="26"
TF_VAR_softnas_smtp_port="26"

# TF_VAR_softnas_smtp_username:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_username="user@mydomain.com"
TF_VAR_softnas_smtp_username="email@example.com"

# TF_VAR_softnas_smtp_password:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_password="MyMailPassword"
TF_VAR_softnas_smtp_password="MyMailPassword"

# TF_VAR_softnas_smtp_from:
# mailserver details for softnas notifications
# eg: TF_VAR_softnas_smtp_from="user@mydomain.com"
TF_VAR_softnas_smtp_from="user@example.com"

# TF_VAR_smtp_encryption:
# mailserver details for softnas notifications
# default: TF_VAR_smtp_encryption="none"
TF_VAR_smtp_encryption="none"

# TF_VAR_install_houdini_license_server:
# It is recommended that you install your houdini license server in a seperate vm yourself, since firehawk currently is ephemerel and will destroy the license server when reprovisioning new versions.
# default TF_VAR_install_houdini_license_server=false
TF_VAR_install_houdini_license_server=false

# TF_VAR_aws_key_name:
# The name of the key pair used in the dev environment. You will create a key pair to access your aws instances, listed here.
# default: TF_VAR_aws_key_name=my_key_pair
TF_VAR_aws_key_name=my_key_pair

# TF_VAR_aws_private_key_path:
# the path to the keypair from within the vagrant VM.
# default: TF_VAR_aws_private_key_path=/secrets/keys/my_key_pair.pem
TF_VAR_aws_private_key_path=/secrets/keys/my_key_pair.pem