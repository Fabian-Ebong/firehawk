#!/usr/bin/env bash

# The contents of resources-*.template files are modified by update_vars.sh.
# Editing these comments should only be done in secrets/resources-{resource tier}, and then propogated with 'source ./update_vars.sh --{envtier} --init'

# WARNING: When editing your config files do not store any secrets / sensitive information here.
# Secrets should only ever be stored in the encrypted secrets file.
# Unencrypted config files are still stored in your private repository and will not be publicly available.

# CONFIG INITIALIZATION #

# Private values must be used as values only (and not in #commented lines), since only the values (after =) that are kept private.
# Only Commented lines and the variable names / keys are read from this private secrets/config file in your private repo to auto generate the public firehawk/config.template file when running 'source ./update_vars.sh'.

# If these steps are followed then no private values will be or should be propogated into the public repo firehawk/config.template file.
# Before making any commits of config.template to the public firehawk repo ensure there are no secrets / sensitive information contained in a commit.
# If defining a new variable for public use, be sure to provide any new default variable keys you may end up adding with a commented out description with example dummy values above your actual private value used to assist others.

# Do not put real world sensitive information in the example comments / #commented out lines in any of these files.

# New comments should be only added in secrets/config as these lines will be propogated into the config.template schema used to initialise any new secrets/config file for other users of the Firehawk repo.

# BEGIN CONFIGURATION #

# TF_VAR_openfirehawkserver_vcpus: 
# The number of VCPU's dedicated to the vagrant VM used in the dev environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_vcpus=2
TF_VAR_openfirehawkserver_vcpus=insertvalue

# TF_VAR_openfirehawkserver_ram: 
# The amount of ram in MB dedicated to the vagrant VM in the dev environment.  Primarily you should consider the requirements of running mongo DB for Deadline on this host.
# default: TF_VAR_openfirehawkserver_ram=6144
TF_VAR_openfirehawkserver_ram=insertvalue

# TF_VAR_workstation_address:
# The address of the workstation the artist will operate from onsite.  This is normally a VM for testing.
# eg: TF_VAR_workstation_address=192.168.29.31
TF_VAR_workstation_address=insertvalue

# TF_VAR_workstation_ethernet_interface:
# The network interface used on the dev workstation / vm to configure routes.  static routes are applied directly to the workstation to route traffice via the vpn gateway.
# To list the available options on the workstation execute:
# ip a
# default: TF_VAR_workstation_ethernet_interface=eth1
TF_VAR_workstation_ethernet_interface=insertvalue

# TF_VAR_gateway_mac: 
# A randomly generated mac address for the VM that vagrant will use for the VM's bridged network adapter. Your onsite router will assign an ip based on this mac.
# You can use the script in scripts/random_mac_unicast.sh to generate a mac adress.
# You should ensure that it is static/reserved within your router for a persistent IP address. Unicast mac addresses must not have an odd second digit - this is required and handled by the random_mac_unicast.sh script.
# When using an NFS Share / onsite NAS, you will have to configure static routes on your router so that the NAS can reach the cloud subnets through the firehawk gateway vm.
# No two systems can function with the same mac address values on the same network.
# default: TF_VAR_gateway_mac=CE4C7CD0284F
TF_VAR_gateway_mac=insertvalue

# TF_VAR_vpc_cidr:
# This is the IP range (CIDR notation) of your cloud subnet that all AWS private addresses will reside in.
# default: TF_VAR_vpc_cidr=10.1.0.0/16
TF_VAR_vpc_cidr=insertvalue

# TF_VAR_private_subnet1:
# The dev IP range for private subnet 1 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet1=10.1.1.0/24
TF_VAR_private_subnet1=insertvalue

# TF_VAR_private_subnet2:
# The dev IP range for private subnet 2 for workers.  This subnet is accessed via VPN or bastion hosts.
# default: TF_VAR_private_subnet2=10.1.2.0/24
TF_VAR_private_subnet2=insertvalue

# TF_VAR_public_subnet1:
# The dev IP range for public subnet 1 for public facing  systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet1=10.1.101.0/24
TF_VAR_public_subnet1=insertvalue

# TF_VAR_public_subnet2:
# The dev IP range for public subnet 2 for public facing systems.  examples are your VPN access server instance, or bastion host for provisioning other instances in the private network.
# default: TF_VAR_public_subnet2=10.1.102.0/24
TF_VAR_public_subnet2=insertvalue

# TF_VAR_vpn_cidr:
# Open VPN sets up DHCP in this range for every connection in the dev env to provide a unique ip on each side of the VPN for every system. Dont change this from the default for now. In the future it should be unique. Reference for potential ranges https://www.arin.net/reference/research/statistics/address_filters/
# default: TF_VAR_vpn_cidr=172.17.232.0/24
TF_VAR_vpn_cidr=insertvalue

# TF_VAR_softnas1_private_ip1:
# The private ip to install softnas dev with for its first interface.
# default: TF_VAR_softnas1_private_ip1=10.1.1.11
TF_VAR_softnas1_private_ip1=insertvalue

# TF_VAR_softnas_instance_type:
# The ability to switch the performance of the softnas instance types to save costs in dev environment, and increase performance if required in production..
# eg1: TF_VAR_softnas_instance_type=m4.2xlarge
# default: TF_VAR_softnas_instance_type=m4.xlarge
TF_VAR_softnas_instance_type=insertvalue

# TF_VAR_route_zone_id:
# The route zone id for the prod domain name in your prod AWS account.  This should be unique to the dev account, but it maybe possible to avoid with further developement.  Your aws account will need a public domain name in the account (route 53) in order to assign public routes for DNS.  Once this is established in your account, insert the route zone id here for Terraform to create addresses for systems that are publicly accessible, like vpn and bastion hosts.
# eg: TF_VAR_route_zone_id=KJ2352KJ235LJ
# default: TF_VAR_route_zone_id=none
TF_VAR_route_zone_id=insertvalue

# TF_VAR_cert_arn:
# The ARN for the SSL certificate of your public dev domain in the AWS dev account.  You will have an SSL certificate for any public domain in aws, and this has an ARN associated with it.
# eg: TF_VAR_cert_arn="arn:aws:acm:ap-southeast-2:322531242314:certificate/adsfljnf3-234g-5634-3245-42kjh243kj"
# default: TF_VAR_cert_arn=none
TF_VAR_cert_arn=insertvalue

# TF_VAR_public_domain:
# The public dev domain name in the AWS dev account.  You can purchase a cheap domain in AWS with lesser known extensions for testing and use this here. Launched Infrastructure will switch between different domains depending on the staging environment for isolation. Some resources, like licence servers, may exist in a single domain (usually prod), since they often are not dynamic and cant be moved easily.
# eg: TF_VAR_public_domain=devexample.com
# default: TF_VAR_public_domain=none
TF_VAR_public_domain=insertvalue
