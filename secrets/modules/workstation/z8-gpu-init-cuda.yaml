# if issues are encounter look here https://access.redhat.com/discussions/3489411

- hosts: workstation.firehawkvfx.com
  remote_user: root
  become: true

  vars:
    rhel_version: 7.6
    cuda_driver: 10.1.105
    nvidia_driver: 418.39
    driver_url: https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.39_linux.run
    driver_download_dest: /vagrant/downloads/cuda_10.1.105_418.39_linux.run
    driver_dest: /var/tmp/cuda_10.1.105_418.39_linux.run
    epel_url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    epel_dest: /var/tmp/epel-release-latest-7.noarch.rpm
    grub_mod: "rd.driver.blacklist=nouveau nouveau.modeset=0"
  
  tasks:
  - name: disable gui
    command: systemctl isolate multi-user.target
  
  - name: check if epel rpm exists
    stat: 
      path: "{{ epel_dest }}"
    register: epel_stat

# may need to be 0700 instead of 700

  - get_url:
      dest: "{{ epel_dest }}"
      url: "{{ epel_url }}"
      mode: 700
    when: epel_stat.stat.exists == false

  - name: check if driver exists
    stat: 
      path: "{{ driver_dest }}"
    register: driver_stat_local
    connection: local

  - name: download nvidia driver to local system
    get_url:
      dest: "{{ driver_dest }}"
      url: "{{ driver_url }}"
      mode: 700
    when: driver_stat_local.stat.exists == false
    connection: local

  - copy:
      src: "{{ driver_dest }}"
      dest: "{{ driver_dest }}"
      mode: 700
  
  # - name: check if driver exists
  #   stat: 
  #     path: "{{ driver_dest }}"
  #   register: driver_stat

  # - get_url:
  #     dest: "{{ driver_dest }}"
  #     url: "{{ driver_url }}"
  #     mode: 700
  #   when: driver_stat.stat.exists == false

  - name: version lock rhel for production
    shell: |
      subscription-manager release --set {{ rhel_version }}
      yum clean all

  # see http://www.advancedclustering.com/act_kb/installing-nvidia-drivers-rhel-centos-7/
  - name: upgrade all packages
    yum:
      name: '*'
      state: latest

  - name: install the 'Gnome desktop' environment group
    yum:
      name: "@^gnome-desktop-environment"
      state: present

  - name: install the 'Development tools' package group
    yum:
      name: "@Development tools"
      state: present

  - name: kernel-devel
    yum:
      name: kernel-devel
      state: present

  - name: epel
    yum:
      name: '/var/tmp/epel-release-latest-7.noarch.rpm'
      state: present

  - name: dkms
    yum:
      name: dkms
      state: present

  - name: libglvnd
    yum:
      name: libglvnd-devel
      state: present

  - name: Reboot the server and wait for it to come back up.
    reboot:

  - name: rebooted
    debug:
      msg: "rebooted"

  - command: systemctl isolate multi-user.target

  - name: Blacklist the nouveau driver module
    kernel_blacklist:
      name: nouveau
      state: present
  
  - name: Test for line.  could be done better because couldn't test for mod to line exactly.
    shell: |
      grep 'GRUB_CMDLINE_LINUX' /etc/default/grub
    register: test_grep

  - name: output /etc/default/grub
    debug:
      msg: "{{ test_grep.stdout }}"

  - name: replace string after quiet
    replace:
      path: /etc/default/grub
      regexp: 'quiet"'
      replace: 'quiet {{ grub_mod }}"'
    when: test_grep.stdout != ""

  - name: check /etc/default/grub
    shell: |
      cat /etc/default/grub
    register: grub_conf_output

  - name: grub_conf_output
    debug:
      msg: "{{ grub_conf_output.stdout }}"

  - name: blacklist
    copy:
      content: blacklist nouveau
      dest: /etc/modprobe.d/blacklist.conf

  - name: check /etc/modprobe.d/blacklist.conf
    shell: |
      cat /etc/modprobe.d/blacklist.conf
    register: blacklist_conf_output

  - name: blacklist_conf_output
    debug:
      msg: "{{ blacklist_conf_output.stdout }}"

  - name: rebuild grub
    command: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg

  - name: backup initramfs
    shell: |
      mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r)-nouveau.img
      dracut /boot/initramfs-$(uname -r).img $(uname -r)
    register: dracut_output

  - debug:
      msg: "{{ dracut_output.stdout }}"

  - name: Reboot the server and wait for it to come back up.
    reboot:

  - name: rebooted
    debug:
      msg: "rebooted"

  - command: systemctl isolate multi-user.target

    # install cuda
  - name: install cuda and nvidia driver
    shell: |
      cd /var/tmp/
      {{ driver_dest }} --silent --driver --toolkit --samples --run-nvidia-xconfig
    register: nvidia_output

  - debug:
      msg: "{{ nvidia_output.stdout }}"

  - name: nvidia-smi output
    shell: |
      nvidia-smi
    register: smi_output

  - debug:
      msg: "{{ smi_output.stdout }}"

  #   # should look at configuring environment vars here if successful.

  - name: Reboot the server and wait for it to come back up.
    reboot:

  - name: rebooted
    debug:
      msg: "rebooted"

    # after install, initialise the driver with_
    # nvidia-smi